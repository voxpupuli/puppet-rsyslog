type Rsyslog::Actions::Outputs::Omelasticsearch = Struct[
  {
    server               => Optional[Variant[Stdlib::Host, Array[Stdlib::Host]]],
    serverport           => Optional[Stdlib::Port],
    healthchecktimeout   => Optional[Integer],
    searchindex          => Optional[String[1]],
    dynsearchindex       => Optional[Enum['on', 'off']],
    searchtype           => Optional[String[1]],
    dynsearchtype        => Optional[Enum['on', 'off']],
    pipelinename         => Optional[String[1]],
    dynpipelinename      => Optional[Enum['on', 'off']],
    usehttps             => Optional[Enum['on', 'off']],
    timeout              => Optional[Pattern[/^([0-9]+)(ms|s|m)$/]],
    template             => Optional[String[1]],
    bulkmode             => Optional[Enum['on', 'off']],
    maxbytes             => Optional[Pattern[/^([0-9]+)[kKmMgGtT]$/]],
    parent               => Optional[String[1]],
    dynparent            => Optional[Enum['on', 'off']],
    uid                  => Optional[String[1]],
    pwd                  => Optional[String[1]],
    errorfile            => Optional[Stdlib::Absolutepath],
    'tls.cacert'         => Optional[Stdlib::Absolutepath],
    'tls.mycert'         => Optional[Stdlib::Absolutepath],
    'tls.myprivkey'      => Optional[Stdlib::Absolutepath],
    bulkid               => Optional[String[1]],
    dynbulkid            => Optional[Enum['on', 'off']],
    writeoperation       => Optional[Enum['index', 'create']],
    retryfailures        => Optional[Enum['on', 'off']],
    retryruleset         => Optional[String[1]],
    'ratelimit.interval' => Optional[Integer],
    'ratelimit.burst'    => Optional[Integer],
  }
]
